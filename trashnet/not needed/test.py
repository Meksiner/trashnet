import numpy as np
import cv2
from tensorflow.keras.models import load_model

# üîπ –ö–ª–∞—Å—Å—ã –º—É—Å–æ—Ä–∞
class_labels = ["cardboard", "glass", "metal", "paper", "plastic", "trash"]

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = load_model("trashnet_classifier.h5")
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# üîπ –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—ë)
image_path = "glass8.jpg"
image = cv2.imread(image_path)

if image is None:
    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    exit()

# üîπ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
grid_size = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–±–∏–µ–Ω–∏–π (4x4)
h, w, _ = image.shape  # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
cell_h, cell_w = h // grid_size, w // grid_size  # –†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
for i in range(grid_size):
    for j in range(grid_size):
        # üîπ –í—ã—Ä–µ–∑–∞–µ–º —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        x1, y1 = j * cell_w, i * cell_h
        x2, y2 = (j + 1) * cell_w, (i + 1) * cell_h
        patch = image[y1:y2, x1:x2]

        # üîπ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        img = cv2.resize(patch, (224, 224))
        img = np.expand_dims(img, axis=0)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –±–∞—Ç—á–∞

        # üîπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        pred = model.predict(img)
        label_index = np.argmax(pred)  # –ò–Ω–¥–µ–∫—Å –∫–ª–∞—Å—Å–∞
        confidence = np.max(pred)  # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        label_text = class_labels[label_index]  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞

        # üîπ –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç –∏ –Ω–∞–¥–ø–∏—Å—å
        cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 2)
        cv2.putText(image, f"{label_text} ({confidence:.2f})", (x1 + 5, y1 + 20),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)

# üîπ –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
cv2.imshow("Grid Classification", image)
cv2.waitKey(0)
cv2.destroyAllWindows()
